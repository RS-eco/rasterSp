% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rasterizePoints.R
\name{rasterizePoints}
\alias{rasterizePoints}
\title{Convert point data to gridded data}
\usage{
rasterizePoints(
  data,
  long = NA,
  lat = NA,
  res = 0.5,
  tres = NA,
  ...,
  crop = T,
  crs = sp::CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
)
}
\arguments{
\item{data}{SpatialPointsDataFrame or dataframe}

\item{long}{\code{character} specifying name of Longitude column.}

\item{lat}{\code{character} specifying name of Latitude column.}

\item{res}{Desired resolution for ridded output data}

\item{tres}{Desired temporal resolution}

\item{...}{Additional arguments for rasterize function.}

\item{crop}{logical. Crop raster by bounding box of SpatialPoints, default is FALSE.}

\item{crs}{projection of input data, if data is not a SpatialPointsDataFrame}
}
\value{
rasterstack with data
}
\description{
Turn a dataframe or SpatiaPointsDataFrame into a RasterLayer or RasterStack 
with a certain resolution and certain extent.
}
\examples{
data(meuse, package="sp")
library(ggplot2)
ggplot(aes(x = x, y = y, color = zinc), data = meuse) + 
geom_point() + theme(legend.position=c(0.85,0.2))

gr_meuse <- rasterizePoints(data=meuse, res=100, crs=sp::CRS("+init=epsg:28992"))
library(raster)
ggplot(aes(x = x, y = y, fill = cadmium), data = data.frame(rasterToPoints(gr_meuse))) + 
geom_raster()

# If long and lat are not called x,y, 
# you have to specify their columnNames 
# in the rasterizePoints function accordingly
meuse_longlat <- meuse
colnames(meuse_longlat)[c(1,2)] <- c("Longitude", "Latitude")

gr_meuse <- rasterizePoints(data=meuse_longlat, long="Longitude", lat="Latitude", 
                            res=100, crs=sp::CRS("+init=epsg:28992"))
ggplot(aes(x = x, y = y, fill = lead), data = data.frame(rasterToPoints(gr_meuse))) + 
geom_raster()

}
